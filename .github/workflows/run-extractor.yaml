name: Run - Extractor

on:
  workflow_dispatch:
    inputs:
      CONFIGURATION_YAML_PATH:
        description: 'Choose whether to extract all APIs or use a specific config file'
        required: true
        type: choice
        options:
          - Extract All APIs
          - configuration.extractor.yaml
      API_SPECIFICATION_FORMAT:
        description: 'API Specification Format'
        required: true
        type: choice
        options:
          - OpenAPIV3Yaml
          - OpenAPIV3Json
          - OpenAPIV2Yaml
          - OpenAPIV2Json

env:
  APIOPS_RELEASE_VERSION: v2.1.0
  OUTPUT_FOLDER: apimartifacts

jobs:
  extract:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - uses: actions/checkout@v4

      - name: Setup extractor variables
        id: vars
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "RELEASE_FILE=extractor-win-x64.zip" >> "$GITHUB_OUTPUT"
            echo "EXECUTABLE=extractor.exe" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "macOS" && "${{ runner.arch }}" == "ARM64" ]]; then
            echo "RELEASE_FILE=extractor-osx-arm64.zip" >> "$GITHUB_OUTPUT"
            echo "EXECUTABLE=extractor" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "RELEASE_FILE=extractor-osx-x64.zip" >> "$GITHUB_OUTPUT"
            echo "EXECUTABLE=extractor" >> "$GITHUB_OUTPUT"
          else
            echo "RELEASE_FILE=extractor-linux-x64.zip" >> "$GITHUB_OUTPUT"
            echo "EXECUTABLE=extractor" >> "$GITHUB_OUTPUT"
          fi

      - name: Download and extract extractor
        run: |
          uri="https://github.com/Azure/apiops/releases/download/${{ env.APIOPS_RELEASE_VERSION }}/${{ steps.vars.outputs.RELEASE_FILE }}"
          downloadPath="${{ runner.temp }}/${{ steps.vars.outputs.RELEASE_FILE }}"
          extractPath="${{ runner.temp }}/extractor"

          echo "Downloading from $uri"
          curl -L "$uri" -o "$downloadPath"

          mkdir -p "$extractPath"
          unzip "$downloadPath" -d "$extractPath"

          chmod +x "$extractPath/${{ steps.vars.outputs.EXECUTABLE }}"
        shell: bash

      - name: Run extractor
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
          API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}
          API_SPECIFICATION_FORMAT: ${{ github.event.inputs.API_SPECIFICATION_FORMAT }}
        run: |
          exe="${{ runner.temp }}/extractor/${{ steps.vars.outputs.EXECUTABLE }}"

          if [[ "${{ github.event.inputs.CONFIGURATION_YAML_PATH }}" == "Extract All APIs" ]]; then
            echo "Running extractor (no config YAML)..."
            "$exe"
          else
            echo "Running extractor (with config YAML)..."
            CONFIGURATION_YAML_PATH="${{ github.workspace }}/${{ github.event.inputs.CONFIGURATION_YAML_PATH }}"
            "$exe" --configuration "$CONFIGURATION_YAML_PATH"
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-from-portal
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}

  create-pull-request:
    needs: extract
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Download extracted artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-from-portal
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}

      - name: Create pull request with artifacts
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "APIM Extract: updated from APIM instance"
          title: "APIM Extract - Updated artifacts"
          body: "This PR is auto-generated by GitHub Actions workflow"
          labels: extract, automated pr
